<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack Pro</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Roboto+Condensed:wght@700&display=swap" rel="stylesheet">
    <style>
        /* --- CSS RESET & ROOT VARIABLES --- */
        :root {
            --felt-green: #0f4c3a;
            --dark-green: #0a3326;
            --gold: #d4af37;
            --gold-dark: #b8972f;
            --light-text: #f0f0f0;
            --dark-bg: #121212;
            --card-bg: #ffffff;
            --red-suit: #c81d1d;
            --black-suit: #222222;
            --radius-sm: 8px;
            --radius-md: 16px;
            --radius-lg: 24px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* --- GENERAL STYLING --- */
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-bg);
            background-image: radial-gradient(circle at top center, var(--dark-green) 0%, var(--dark-bg) 70%);
            color: var(--light-text);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 2rem 1rem;
        }
        
        /* --- MAIN GAME CONTAINER --- */
        .casino-table {
            width: 100%;
            max-width: 1000px;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: var(--radius-lg);
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0,0,0,0.5);
            backdrop-filter: blur(10px);
        }

        /* --- HEADER & INFO SECTION --- */
        .game-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .game-title {
            font-family: 'Roboto Condensed', sans-serif;
            font-size: clamp(2rem, 5vw, 2.5rem);
            font-weight: 700;
            color: var(--gold);
            text-shadow: 0 0 10px rgba(212, 175, 55, 0.5);
            letter-spacing: 2px;
            text-transform: uppercase;
        }
        
        .info-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.3);
            border-radius: var(--radius-md);
            margin-bottom: 2rem;
        }
        
        .bankroll-info, .house-edge-control {
            font-size: 1rem;
            font-weight: 600;
        }

        .house-edge-control {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .house-edge-control input {
            width: 50px;
            border: 1px solid var(--gold);
            background: transparent;
            color: var(--light-text);
            border-radius: 4px;
            text-align: center;
            padding: 0.25rem;
            font-weight: 600;
        }
        
        /* --- HANDS & CARDS SECTION --- */
        .hand-area {
            margin: 2.5rem 0;
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--gold);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .sum-display {
            font-size: 1rem;
            font-weight: 400;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 1rem;
        }

        .cards-container {
            display: flex;
            gap: 0.75rem;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
            min-height: 145px;
            perspective: 1000px;
        }

        @keyframes flip-in {
            from { transform: rotateY(90deg) scale(0.9); opacity: 0; }
            to { transform: rotateY(0deg) scale(1); opacity: 1; }
        }

        .card {
            width: 100px;
            height: 140px;
            background: var(--card-bg);
            border-radius: var(--radius-sm);
            position: relative;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            animation: flip-in 0.5s ease-out forwards;
        }

        .card::before, .card::after {
            position: absolute;
            width: 100%;
            text-align: center;
            font-size: 1.1rem;
        }

        .card::before { content: attr(data-rank); top: 8px; left: 0; }
        .card::after { content: attr(data-rank); bottom: 8px; left: 0; transform: rotate(180deg); }

        .card .suit {
            font-size: 2.5rem;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .card.red { color: var(--red-suit); }
        .card.black { color: var(--black-suit); }
        
        .card.back {
            background: linear-gradient(135deg, #4169e1, #1e40af);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3rem;
            color: rgba(255, 255, 255, 0.5);
        }
        .card.back .suit, .card.back::before, .card.back::after { display: none; }

        /* --- BETTING & CONTROLS --- */
        .betting-section {
            text-align: center;
            padding: 1.5rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: var(--radius-md);
            margin-bottom: 2rem;
        }

        .betting-section h3 {
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--gold);
        }

        .betting-controls {
            display: flex;
            justify-content: center;
            gap: 0.75rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .chip-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 3px solid white;
            font-weight: 700;
            font-size: 0.9rem;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            color: white;
            display: grid;
            place-items: center;
        }
        .chip-button:hover:not(:disabled) {
            transform: scale(1.1);
            box-shadow: 0 0 15px var(--gold);
        }
        .chip-5 { background: #dc143c; }
        .chip-10 { background: #4169e1; }
        .chip-25 { background: #32cd32; }
        .chip-50 { background: #ff4500; }
        .chip-100 { background: #333333; }

        .bet-controls {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin: 1.5rem 0;
        }
        
        .bet-btn {
            padding: 0.5rem 1rem;
            background: transparent;
            border: 2px solid var(--gold);
            color: var(--gold);
            border-radius: 20px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s, color 0.2s;
        }
        .bet-btn:hover:not(:disabled) {
            background-color: var(--gold);
            color: var(--dark-bg);
        }

        .current-bet {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--light-text);
        }
        .current-bet span { color: var(--gold); }
        
        /* --- GAME CONTROLS --- */
        .game-controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 2rem;
        }

        .game-btn {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 700;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease, background-color 0.2s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: white;
        }

        .game-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .game-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        #deal-btn { background-color: #16a34a; }
        #hit-btn { background-color: #1e40af; }
        #stand-btn { background-color: #b91c3c; }
        #double-btn { background-color: #ea580c; }
        #split-btn { background-color: #ca8a04; }
        #insurance-btn { background-color: #6d28d9; }
        #surrender-btn { background-color: #7f1d1d; }

        .hidden { display: none !important; }

        /* --- MESSAGE AREA --- */
        .game-message {
            text-align: center;
            font-size: 1.1rem;
            font-weight: 600;
            padding: 1rem;
            border-radius: var(--radius-md);
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        .message-win { background: rgba(22, 163, 74, 0.3); border-color: #16a34a; }
        .message-lose { background: rgba(185, 28, 60, 0.3); border-color: #b91c3c; }
        .message-tie { background: rgba(234, 88, 12, 0.3); border-color: #ea580c; }
        .message-info { background: rgba(212, 175, 55, 0.2); border-color: var(--gold); }

        /* --- RESPONSIVENESS --- */
        @media (max-width: 768px) {
            body { padding: 1rem 0.5rem; }
            .casino-table { padding: 1.5rem 1rem; }
            .info-bar { flex-direction: column; align-items: stretch; text-align: center; }
            .card { width: 75px; height: 105px; }
            .card::before, .card::after { font-size: 1rem; }
            .card .suit { font-size: 2rem; }
            .cards-container { min-height: 110px; }
            .game-controls { gap: 0.5rem; }
            .game-btn { padding: 0.6rem 1rem; font-size: 0.8rem; }
            .chip-button { width: 45px; height: 45px; }
        }

    </style>
</head>
<body>
    <div class="casino-table">
        <header class="game-header">
            <h1 class="game-title">Blackjack Pro</h1>
        </header>

        <section class="info-bar">
            <div class="bankroll-info">
                💰 Bankroll: $<span id="bankroll">500</span>
            </div>
            <div class="house-edge-control">
                <label for="house-edge">House Edge:</label>
                <input type="number" id="house-edge" min="0" max="10" step="0.1" value="0.5">
                <span>%</span>
            </div>
        </section>

        <section class="hand-area dealer-section">
            <h2 class="section-title">🎩 Dealer</h2>
            <div class="sum-display">Sum: <span id="dealer-sum">?</span></div>
            <div id="dealer-cards" class="cards-container"></div>
        </section>
        
        <section class="hand-area player-section">
            <h2 class="section-title">👤 Your Hand</h2>
            <div class="sum-display">Sum: <span id="player-sum">0</span></div>
            <div id="player-cards" class="cards-container"></div>
        </section>

        <section class="betting-section">
            <h3>Place Your Bet</h3>
            <div class="betting-controls">
                <button class="chip-button chip-5" data-bet="5">$5</button>
                <button class="chip-button chip-10" data-bet="10">$10</button>
                <button class="chip-button chip-25" data-bet="25">$25</button>
                <button class="chip-button chip-50" data-bet="50">$50</button>
                <button class="chip-button chip-100" data-bet="100">$100</button>
            </div>
            <div class="current-bet">Current Bet: $<span id="current-bet">0</span></div>
            <div class="bet-controls">
                <button class="bet-btn" id="clear-bet-btn">Clear</button>
                <button class="bet-btn" id="max-bet-btn">Max Bet</button>
                <button class="bet-btn" id="repeat-bet-btn">Repeat Last</button>
            </div>
        </section>

        <div class="game-controls">
            <button id="deal-btn" class="game-btn">Deal</button>
            <button id="hit-btn" class="game-btn" disabled>Hit</button>
            <button id="stand-btn" class="game-btn" disabled>Stand</button>
            <button id="double-btn" class="game-btn" disabled>Double</button>
            <button id="split-btn" class="game-btn hidden">Split</button>
            <button id="insurance-btn" class="game-btn hidden">Insurance</button>
            <button id="surrender-btn" class="game-btn hidden">Surrender</button>
        </div>

        <div id="game-message" class="game-message message-info">
            Welcome! Place your bet and deal the cards.
        </div>
    </div>

<script>
/* ---------- Blackjack class (LOGIC UNCHANGED) ---------- */
/* Money is stored in integer cents. LocalStorage is used for bankroll & stats. */

/* ---------- Utilities ---------- */
const STORAGE_KEY = 'bj_game_v1';
function centsFromDollars(d) { return Math.round(Number(d) * 100); }
function dollarsFromCents(c) { return (c/100).toFixed(2); }
function randInt(n){ return Math.floor(Math.random()*n); }

/* ---------- BlackjackGame class (logic only) ---------- */
class BlackjackGame {
    constructor({ decks = 1, standOnSoft17 = true } = {}) {
        this.decks = decks;
        this.standOnSoft17 = standOnSoft17;
        this.resetShoe();
        this.resetRoundState();
    }

    resetShoe(){
        this.shoe = [];
        const suits = ['♠','♥','♦','♣'];
        const values = ['A','2','3','4','5','6','7','8','9','10','J','Q','K'];
        for (let d=0; d<this.decks; d++){
            for (let s of suits) for (let v of values) this.shoe.push({value:v, suit:s});
        }
        this.shuffle();
    }

    shuffle(){
        for (let i = this.shoe.length - 1; i > 0; i--){
            const j = randInt(i+1);
            [this.shoe[i], this.shoe[j]] = [this.shoe[j], this.shoe[i]];
        }
    }

    draw(){
        if (this.shoe.length < 15) {
            this.resetShoe();
        }
        return this.shoe.pop();
    }

    resetRoundState(){
        this.playerHands = []; 
        this.dealer = {cards:[], hidden:null};
        this.insuranceCents = 0;
        this.roundInProgress = false;
        this.currentHandIndex = 0;
    }

    makeHand(betCents){
        return { cards: [], betCents: betCents, doubled: false, surrendered:false, finished:false, result:null };
    }

    static handValue(cards){
        let sum = 0, aces = 0;
        for (let c of cards){
            if (c.value === 'A') { sum += 11; aces++; }
            else if (['J','Q','K'].includes(c.value)) sum += 10;
            else sum += parseInt(c.value,10);
        }
        while (sum > 21 && aces > 0){ sum -= 10; aces--; }
        const soft = (cards.some(c=>c.value==='A') && sum+10 <= 21);
        return { sum, aces, soft };
    }

    dealInitial(betCents){
        if (this.roundInProgress) throw new Error('Round already in progress');
        this.resetRoundState();
        this.roundInProgress = true;
        const hand = this.makeHand(betCents);
        hand.cards.push(this.draw());
        hand.cards.push(this.draw());
        this.playerHands.push(hand);
        this.dealer.cards = [this.draw()];
        this.dealer.hidden = this.draw();
        return;
    }

    canSplit(handIndex){
        const h = this.playerHands[handIndex];
        if (!h || h.cards.length !== 2) return false;
        const v0 = h.cards[0].value, v1 = h.cards[1].value;
        const tens = ['10','J','Q','K'];
        if (tens.includes(v0) && tens.includes(v1)) return true;
        return v0 === v1;
    }

    hit(handIndex){
        const h = this.playerHands[handIndex];
        if (!h || h.finished || h.surrendered) return;
        h.cards.push(this.draw());
        const hv = BlackjackGame.handValue(h.cards);
        if (hv.sum > 21) { h.finished = true; h.result = 'bust'; }
    }

    doubleDown(handIndex){
        const h = this.playerHands[handIndex];
        if (!h || h.finished || h.doubled || h.cards.length !== 2) throw new Error('Double not allowed');
        h.doubled = true;
        h.betCents *= 2;
        h.cards.push(this.draw());
        const hv = BlackjackGame.handValue(h.cards);
        h.finished = true;
        if (hv.sum > 21) h.result = 'bust';
    }

    surrender(handIndex){
        const h = this.playerHands[handIndex];
        if (!h || h.finished || h.cards.length !==2) throw new Error('Surrender not allowed');
        h.surrendered = true;
        h.finished = true;
        h.result = 'surrender';
    }

    split(handIndex){
        if (!this.canSplit(handIndex)) throw new Error('Cannot split');
        const h = this.playerHands[handIndex];
        const newBet = h.betCents;
        const cardB = h.cards.pop();
        const newHand = this.makeHand(newBet);
        newHand.cards.push(cardB);
        h.cards.push(this.draw());
        newHand.cards.push(this.draw());
        this.playerHands.splice(handIndex+1,0,newHand);
    }

    takeInsurance(amountCents){
        this.insuranceCents = amountCents;
    }

    playDealer(){
        if (this.dealer.hidden) this.dealer.cards.unshift(this.dealer.hidden);
        this.dealer.hidden = null;
        while (true){
            const hv = BlackjackGame.handValue(this.dealer.cards);
            if (hv.sum < 17) {
                this.dealer.cards.push(this.draw());
                continue;
            }
            if (!this.standOnSoft17) {
                let soft17 = false;
                let sum = 0, aces = 0;
                for (let c of this.dealer.cards){
                    if (c.value === 'A') { sum += 11; aces++; }
                    else if (['J','Q','K'].includes(c.value)) sum += 10;
                    else sum += parseInt(c.value,10);
                }
                if (sum === 17 && aces > 0) soft17 = true;
                if (soft17) { this.dealer.cards.push(this.draw()); continue; }
            }
            break;
        }
    }

    settle(){
        const dealerHasBJ = (() => {
            const temp = [...this.dealer.cards];
            if (this.dealer.hidden) temp.unshift(this.dealer.hidden);
            const hv = BlackjackGame.handValue(temp);
            return hv.sum === 21 && temp.length === 2;
        })();

        if (this.dealer.hidden) this.dealer.cards.unshift(this.dealer.hidden);
        this.dealer.hidden = null;

        const anyNonBJ = this.playerHands.some(h => BlackjackGame.handValue(h.cards).sum !== 21 || h.cards.length !== 2);
        if (!dealerHasBJ && anyNonBJ) this.playDealer();
        const dealerValue = BlackjackGame.handValue(this.dealer.cards).sum;

        let netPayoutCents = 0;
        const perHand = [];
        for (let h of this.playerHands){
            const hv = BlackjackGame.handValue(h.cards);
            let result = null;
            let handPayout = 0;
            const stake = h.betCents;
            if (h.surrendered) {
                result = 'surrender';
                handPayout = Math.round(stake/2);
            } else if (hv.sum === 21 && h.cards.length === 2) {
                if (dealerHasBJ) {
                    result = 'push';
                    handPayout = stake;
                } else {
                    result = 'blackjack';
                    const profit = Math.floor(stake * 1.5);
                    handPayout = stake + profit;
                }
            } else if (h.result === 'bust' || hv.sum > 21) {
                result = 'bust';
                handPayout = 0;
            } else if (dealerHasBJ) {
                result = 'dealer-blackjack';
                handPayout = 0;
            } else {
                if (dealerValue > 21) {
                    result = 'dealer-bust';
                    handPayout = stake * 2;
                } else if (hv.sum > dealerValue) {
                    result = 'player-win';
                    handPayout = stake * 2;
                } else if (hv.sum < dealerValue) {
                    result = 'dealer-win';
                    handPayout = 0;
                } else {
                    result = 'push';
                    handPayout = stake;
                }
            }
            perHand.push({ result, stake, payout: handPayout, cards: h.cards.map(c=>`${c.value}${c.suit}`) });
            netPayoutCents += handPayout;
        }

        let insurancePayout = 0;
        if (this.insuranceCents > 0) {
            if (dealerHasBJ) insurancePayout = this.insuranceCents * 3;
        }
        return { perHand, netPayoutCents, insuranceCents: this.insuranceCents, insurancePayout, dealerCards: this.dealer.cards.map(c=>`${c.value}${c.suit}`), dealerValue };
    }
}

/* ---------- Persistence & stats ---------- */
function loadState(){
    try {
        const raw = localStorage.getItem(STORAGE_KEY);
        if (!raw) return { bankrollCents: 50000, stats: { handsPlayed:0, wins:0, losses:0, pushes:0, blackjacks:0, busts:0 } };
        return JSON.parse(raw);
    } catch(e){
        return { bankrollCents:50000, stats: { handsPlayed:0, wins:0, losses:0, pushes:0, blackjacks:0, busts:0 } };
    }
}
function saveState(state){
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
}

/* ---------- UI glue code (REVISED FOR NEW STRUCTURE) ---------- */

document.addEventListener('DOMContentLoaded', () => {
    /* --- DOM element selectors --- */
    const dom = {
        bankroll: document.getElementById('bankroll'),
        currentBet: document.getElementById('current-bet'),
        playerSum: document.getElementById('player-sum'),
        dealerSum: document.getElementById('dealer-sum'),
        playerCards: document.getElementById('player-cards'),
        dealerCards: document.getElementById('dealer-cards'),
        message: document.getElementById('game-message'),
        dealBtn: document.getElementById('deal-btn'),
        hitBtn: document.getElementById('hit-btn'),
        standBtn: document.getElementById('stand-btn'),
        doubleBtn: document.getElementById('double-btn'),
        splitBtn: document.getElementById('split-btn'),
        insuranceBtn: document.getElementById('insurance-btn'),
        surrenderBtn: document.getElementById('surrender-btn'),
        chipButtons: document.querySelectorAll('.chip-button'),
        clearBetBtn: document.getElementById('clear-bet-btn'),
        maxBetBtn: document.getElementById('max-bet-btn'),
        repeatBetBtn: document.getElementById('repeat-bet-btn'),
    };
    
    /* --- Global UI state --- */
    const ui = {
        currentBetCents: 0,
        lastBetCents: 0,
        game: new BlackjackGame({ decks: 6, standOnSoft17: true }),
        state: loadState()
    };
    
    /* --- Utility UI updaters --- */
    function updateDisplay(){
        dom.bankroll.textContent = dollarsFromCents(ui.state.bankrollCents);
        dom.currentBet.textContent = dollarsFromCents(ui.currentBetCents);
        
        const currentHand = ui.game.playerHands[ui.game.currentHandIndex];
        dom.playerSum.textContent = currentHand ? BlackjackGame.handValue(currentHand.cards).sum : 0;
        
        if (ui.game.roundInProgress && ui.game.dealer.hidden) {
            dom.dealerSum.textContent = BlackjackGame.handValue(ui.game.dealer.cards).sum;
        } else {
            const dsum = BlackjackGame.handValue(ui.game.dealer.cards).sum;
            dom.dealerSum.textContent = ui.game.dealer.cards.length ? dsum : '?';
        }
        
        renderPlayerCards();
        renderDealerCards();
        updateButtons();
    }
    
    function updateButtons() {
        const inProgress = ui.game.roundInProgress;
        dom.dealBtn.disabled = inProgress || ui.currentBetCents === 0 || ui.currentBetCents > ui.state.bankrollCents;
        dom.hitBtn.disabled = !inProgress;
        dom.standBtn.disabled = !inProgress;
        dom.doubleBtn.disabled = !inProgress || !canDoubleNow();

        // Extra buttons logic
        const playerHand = ui.game.playerHands[0];
        const dealerShowsAce = inProgress && ui.game.dealer.cards[0]?.value === 'A';
        const canSplit = inProgress && playerHand?.cards.length === 2 && ui.game.canSplit(0) && ui.state.bankrollCents >= playerHand.betCents;
        const canSurrender = inProgress && playerHand?.cards.length === 2;
        
        dom.splitBtn.classList.toggle('hidden', !canSplit);
        dom.insuranceBtn.classList.toggle('hidden', !dealerShowsAce);
        dom.surrenderBtn.classList.toggle('hidden', !canSurrender);
    }
    
    /* --- Card Rendering --- */
    function renderDealerCards(){
        dom.dealerCards.innerHTML = '';
        if (ui.game.roundInProgress && ui.game.dealer.hidden) {
            dom.dealerCards.appendChild(createCardElement(null, true));
            dom.dealerCards.appendChild(createCardElement(ui.game.dealer.cards[0]));
        } else {
            ui.game.dealer.cards.forEach(c => dom.dealerCards.appendChild(createCardElement(c)));
        }
    }
    
    function renderPlayerCards(){
        dom.playerCards.innerHTML = '';
        if (ui.game.playerHands.length > 1) {
            ui.game.playerHands.forEach((h, idx) => {
                const handWrap = document.createElement('div');
                handWrap.style.border = idx === ui.game.currentHandIndex ? '2px solid var(--gold)' : '2px solid transparent';
                handWrap.style.borderRadius = 'var(--radius-md)';
                handWrap.style.padding = '0.5rem';
                h.cards.forEach(c => handWrap.appendChild(createCardElement(c)));
                dom.playerCards.appendChild(handWrap);
            });
        } else if (ui.game.playerHands.length === 1) {
            ui.game.playerHands[0].cards.forEach(c => dom.playerCards.appendChild(createCardElement(c)));
        }
    }

    function createCardElement(card, isHidden = false) {
        const el = document.createElement('div');
        el.className = 'card';
        if (isHidden) {
            el.classList.add('back');
            el.innerHTML = '<span>?</span>';
            return el;
        }
        const isRed = card.suit === '♥' || card.suit === '♦';
        el.classList.add(isRed ? 'red' : 'black');
        el.dataset.rank = card.value;
        el.innerHTML = `<div class="suit">${card.suit}</div>`;
        return el;
    }
    
    function showMessage(message, type='info'){
        dom.message.textContent = message;
        dom.message.className = `game-message message-${type}`;
    }

    /* --- Betting functions --- */
    function addToBet(amountDollars){
        if (ui.game.roundInProgress) { showMessage("Cannot change bet during a hand!", "info"); return; }
        const addCents = centsFromDollars(amountDollars);
        if (ui.currentBetCents + addCents > ui.state.bankrollCents) { showMessage("Insufficient funds!", "info"); return; }
        ui.currentBetCents += addCents;
        updateDisplay();
    }

    function clearBet(){
        if (ui.game.roundInProgress) { showMessage("Cannot change bet during a hand!", "info"); return; }
        ui.currentBetCents = 0;
        updateDisplay();
    }
    function maxBet(){
        if (ui.game.roundInProgress) { showMessage("Cannot change bet during a hand!", "info"); return; }
        ui.currentBetCents = ui.state.bankrollCents;
        updateDisplay();
    }
    function repeatBet(){
        if (ui.game.roundInProgress) { showMessage("Cannot change bet during a hand!", "info"); return; }
        if (!ui.lastBetCents) { showMessage("No previous bet to repeat!", "info"); return; }
        if (ui.lastBetCents > ui.state.bankrollCents) { showMessage("Insufficient funds for last bet!", "info"); return; }
        ui.currentBetCents = ui.lastBetCents;
        updateDisplay();
    }
    
    /* --- Game action handlers (UI -> class) --- */
    function canDoubleNow(){
        const h = ui.game.playerHands[ui.game.currentHandIndex];
        if (!h || h.cards.length !== 2 || h.doubled) return false;
        return ui.state.bankrollCents >= h.betCents;
    }

    function handleDeal(){
        if (ui.currentBetCents === 0) { showMessage("Please place a bet first!", "info"); return; }
        if (ui.currentBetCents > ui.state.bankrollCents) { showMessage("Insufficient funds!", "info"); return; }

        ui.state.bankrollCents -= ui.currentBetCents;
        ui.lastBetCents = ui.currentBetCents;
        ui.game.dealInitial(ui.currentBetCents);
        showMessage("Cards dealt! Good luck.", "info");
        
        updateDisplay();

        const playerHand = ui.game.playerHands[0];
        const playerHV = BlackjackGame.handValue(playerHand.cards);
        
        if (playerHV.sum === 21) {
            showMessage("Blackjack!", "win");
            setTimeout(finalizeRound, 1000);
        }
    }
    
    function handleHit(){
        ui.game.hit(ui.game.currentHandIndex);
        updateDisplay();
        const h = ui.game.playerHands[ui.game.currentHandIndex];
        if (h.finished) {
            showMessage(`Bust! Sum is ${BlackjackGame.handValue(h.cards).sum}.`, 'lose');
            advanceToNextHandOrResolve();
        }
    }

    function handleDouble(){
        const idx = ui.game.currentHandIndex;
        const h = ui.game.playerHands[idx];
        if (!canDoubleNow()) { showMessage("Double not allowed.", 'info'); return; }
        ui.state.bankrollCents -= h.betCents;
        ui.game.doubleDown(idx);
        showMessage("Doubled down!", 'info');
        updateDisplay();
        setTimeout(advanceToNextHandOrResolve, 500);
    }
    
    function handleStand(){
        ui.game.playerHands[ui.game.currentHandIndex].finished = true;
        advanceToNextHandOrResolve();
    }

    function handleSplit(){
        try {
            const idx = ui.game.currentHandIndex;
            const hand = ui.game.playerHands[idx];
            if (ui.state.bankrollCents < hand.betCents) { showMessage("Insufficient funds to split.", "info"); return; }
            ui.state.bankrollCents -= hand.betCents;
            ui.game.split(idx);
            showMessage("Hand split.", 'info');
            updateDisplay();
        } catch (e) { showMessage("Split failed: " + e.message, 'info'); }
    }
    
    function handleSurrender(){
        try {
            ui.game.surrender(ui.game.currentHandIndex);
            showMessage("You surrendered.", 'info');
            finalizeRound();
        } catch(e) { showMessage("Surrender not allowed.", 'info'); }
    }

    function offerInsurance(){
        const hand = ui.game.playerHands[0];
        const maxInsurance = Math.floor(hand.betCents / 2);
        if (maxInsurance <= 0) { showMessage("Insurance not available.", "info"); return; }
        const answer = prompt(`Enter insurance (max $${dollarsFromCents(maxInsurance)}):`, dollarsFromCents(maxInsurance));
        if (answer === null) return;
        const amt = centsFromDollars(answer);
        if (isNaN(amt) || amt < 0 || amt > maxInsurance || amt > ui.state.bankrollCents) { showMessage("Invalid insurance amount.", "info"); return; }
        ui.state.bankrollCents -= amt;
        ui.game.takeInsurance(amt);
        updateDisplay();
        showMessage(`Insurance placed: $${dollarsFromCents(amt)}.`, 'info');
        dom.insuranceBtn.classList.add('hidden');
    }

    function advanceToNextHandOrResolve(){
        const next = ui.game.playerHands.findIndex((h,i) => !h.finished && i > ui.game.currentHandIndex);
        if (next !== -1) {
            ui.game.currentHandIndex = next;
            updateDisplay();
            showMessage(`Playing hand ${next+1}`, 'info');
        } else {
            finalizeRound();
        }
    }
    
    function finalizeRound(){
        const res = ui.game.settle();
        ui.state.bankrollCents += res.netPayoutCents + res.insurancePayout;
        
        // Update stats
        res.perHand.forEach(h => {
            ui.state.stats.handsPlayed++;
            if (h.result === 'blackjack') { ui.state.stats.blackjacks++; ui.state.stats.wins++; }
            else if (['player-win','dealer-bust'].includes(h.result)) { ui.state.stats.wins++; }
            else if (h.result === 'push') ui.state.stats.pushes++;
            else { ui.state.stats.losses++; if (h.result === 'bust') ui.state.stats.busts++; }
        });
        
        saveState(ui.state);
        
        let finalMessage = `Dealer has ${res.dealerValue}. `;
        const playerWins = res.perHand.some(h => ['blackjack', 'player-win', 'dealer-bust'].includes(h.result));
        const playerLoses = res.perHand.some(h => ['bust', 'dealer-win', 'dealer-blackjack', 'surrender'].includes(h.result));
        const playerPushes = res.perHand.some(h => h.result === 'push');

        let messageType = 'info';
        if (playerWins && !playerLoses) messageType = 'win';
        else if (playerLoses && !playerWins) messageType = 'lose';
        else if (playerPushes && !playerLoses && !playerWins) messageType = 'tie';
        
        setTimeout(() => {
            ui.game.roundInProgress = false;
            ui.currentBetCents = 0;
            updateDisplay();
            showMessage(finalMessage + "Place your next bet.", messageType);
        }, 1500);
    }
    
    /* --- Event Listeners --- */
    dom.dealBtn.addEventListener('click', handleDeal);
    dom.hitBtn.addEventListener('click', handleHit);
    dom.standBtn.addEventListener('click', handleStand);
    dom.doubleBtn.addEventListener('click', handleDouble);
    dom.splitBtn.addEventListener('click', handleSplit);
    dom.surrenderBtn.addEventListener('click', handleSurrender);
    dom.insuranceBtn.addEventListener('click', offerInsurance);
    
    dom.chipButtons.forEach(btn => {
        btn.addEventListener('click', () => addToBet(btn.dataset.bet));
    });
    
    dom.clearBetBtn.addEventListener('click', clearBet);
    dom.maxBetBtn.addEventListener('click', maxBet);
    dom.repeatBetBtn.addEventListener('click', repeatBet);
    
    /* --- Initial Load --- */
    updateDisplay();
});
</script>
</body>
</html>